<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="xyz.flym.carlis.persistence.mapper.ScenicSpotFeedbackMapper" >
  <resultMap id="BaseResultMap" type="xyz.flym.carlis.persistence.domain.ScenicSpotFeedback" >
    <id column="scenic_spot_feedback_id" property="scenicSpotFeedbackId" jdbcType="INTEGER" />
    <result column="scenic_spot_id" property="scenicSpotId" jdbcType="INTEGER" />
    <result column="type" property="type" jdbcType="BIT" />
    <result column="content" property="content" jdbcType="NVARCHAR" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="created_on" property="createdOn" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    scenic_spot_feedback_id, scenic_spot_id, type, content, user_id, created_on
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from scenic_spot_feedback
    where scenic_spot_feedback_id = #{scenicSpotFeedbackId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from scenic_spot_feedback
    where scenic_spot_feedback_id = #{scenicSpotFeedbackId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="xyz.flym.carlis.persistence.domain.ScenicSpotFeedback" >
    insert into scenic_spot_feedback (scenic_spot_feedback_id, scenic_spot_id, 
      type, content, user_id, 
      created_on)
    values (#{scenicSpotFeedbackId,jdbcType=INTEGER}, #{scenicSpotId,jdbcType=INTEGER}, 
      #{type,jdbcType=BIT}, #{content,jdbcType=NVARCHAR}, #{userId,jdbcType=INTEGER}, 
      #{createdOn,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="xyz.flym.carlis.persistence.domain.ScenicSpotFeedback" >
    insert into scenic_spot_feedback
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="scenicSpotFeedbackId != null" >
        scenic_spot_feedback_id,
      </if>
      <if test="scenicSpotId != null" >
        scenic_spot_id,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="content != null" >
        content,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="createdOn != null" >
        created_on,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="scenicSpotFeedbackId != null" >
        #{scenicSpotFeedbackId,jdbcType=INTEGER},
      </if>
      <if test="scenicSpotId != null" >
        #{scenicSpotId,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        #{type,jdbcType=BIT},
      </if>
      <if test="content != null" >
        #{content,jdbcType=NVARCHAR},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="createdOn != null" >
        #{createdOn,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="xyz.flym.carlis.persistence.domain.ScenicSpotFeedback" >
    update scenic_spot_feedback
    <set >
      <if test="scenicSpotId != null" >
        scenic_spot_id = #{scenicSpotId,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=BIT},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=NVARCHAR},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="createdOn != null" >
        created_on = #{createdOn,jdbcType=TIMESTAMP},
      </if>
    </set>
    where scenic_spot_feedback_id = #{scenicSpotFeedbackId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="xyz.flym.carlis.persistence.domain.ScenicSpotFeedback" >
    update scenic_spot_feedback
    set scenic_spot_id = #{scenicSpotId,jdbcType=INTEGER},
      type = #{type,jdbcType=BIT},
      content = #{content,jdbcType=NVARCHAR},
      user_id = #{userId,jdbcType=INTEGER},
      created_on = #{createdOn,jdbcType=TIMESTAMP}
    where scenic_spot_feedback_id = #{scenicSpotFeedbackId,jdbcType=INTEGER}
  </update>
</mapper>